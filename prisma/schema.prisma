generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

// model StudySpot {
//   id              String       @default(cuid()) @id
//   name            String
//   location        Location?     @relation(fields: [locationId], references: [id])
//   locationId      String        @unique
//   photos          String[]
//   freeWifi        Boolean
//   noiseLevel      String
//   seatingCapacity String
//   hours           String?
//   powerOutlets    Boolean
//   accessibility   String?
//   publicRestrooms Boolean
//   indoorOutdoor   String
//   studyResources  String[]
//   reviews         Review[]
//   school          School       @relation(fields: [schoolId], references: [id])
//   schoolId        String
//   user            User[]   
// }

// model Location {
//   id        String     @default(cuid()) @id
//   address   String
//   latitude  String?
//   longitude String?
//   StudySpot StudySpot?
// }

// model Review {
//   id          String   @default(cuid()) @id
//   content     String
//   likes       Like[]
//   author      User     @relation(fields: [authorId], references: [id])
//   authorId    String
//   studySpot   StudySpot @relation(fields: [studySpotId], references: [id])
//   studySpotId String
// }

// model Like {
//   id         String  @default(cuid()) @id
//   review     Review  @relation(fields: [reviewId], references: [id])
//   reviewId   String
//   student    User    @relation(fields: [studentId], references: [id])
//   studentId  String
// }

// model School {
//   id         String   @default(cuid()) @id
//   name       String
//   students   User[]
//   address    String
//   photos     String[]
//   studySpots StudySpot[]
// }

model User {
  id          String   @default(cuid()) @id
  email       String   @unique
  name        String
  avatar      String?
  password    String
  // accounts      Account[]
  // sessions      Session[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // reviews     Review[]
  // studySpots  StudySpot[]
  // schools     School[]   
  // likes       Like[]
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields:[userId], references:[id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
  
//   }

//   model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique@map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  
//   }


// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

